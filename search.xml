<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>OI代码模板计划 - 动态树 - LCT</title>
      <link href="/2018/09/12/%5BOI%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%E8%AE%A1%E5%88%92%5D%E5%8A%A8%E6%80%81%E6%A0%91%20-%20LCT/"/>
      <url>/2018/09/12/%5BOI%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%E8%AE%A1%E5%88%92%5D%E5%8A%A8%E6%80%81%E6%A0%91%20-%20LCT/</url>
      <content type="html"><![CDATA[<p>代码：洛谷P3690 Link Cut Tree （动态树）</p><p>给定n个点以及每个点的权值，要你处理接下来的m个操作。操作有4种。操作从0到3编号。点从1到n编号。</p><p>0：后接两个整数(x，y)，代表询问从x到y的路径上的点的权值的xor和。保证x到y是联通的。</p><p>1：后接两个整数(x，y)，代表连接x到y，若x到y已经联通则无需连接。</p><p>2：后接两个整数(x，y)，代表删除边(x，y)，不保证边(x，y)存在。</p><p>3：后接两个整数(x，y)，代表将点x上的权值变成y。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n, m, val[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>], *p1 = buf, *p2 = buf;</span><br><span class="line">    <span class="keyword">return</span> p1 == p2 &amp;&amp; (p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">100000</span>, <span class="built_in">stdin</span>), p1 == p2) ? EOF : *p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _read()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">char</span> ch = nc();</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = nc();</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) sum = sum * <span class="number">10</span> + ch - <span class="number">48</span>, ch = nc();</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> pbuf[<span class="number">100000</span>], *pp = pbuf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pp - pbuf==<span class="number">100000</span>) fwrite(pbuf, <span class="number">1</span>, <span class="number">100000</span>, <span class="built_in">stdout</span>), pp = pbuf;</span><br><span class="line">    *pp++ = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sta[<span class="number">35</span>];</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;sta[top++] = x % <span class="number">10</span>, x /= <span class="number">10</span>;&#125; <span class="keyword">while</span>(x);</span><br><span class="line">    <span class="keyword">while</span> (top) push(sta[--top] + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> LCT</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> top, son[maxm][<span class="number">2</span>], fa[maxm], xr[maxm], stk[maxm], rev[maxm];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span> </span>&#123; xr[x] = xr[son[x][<span class="number">1</span>]] ^ xr[son[x][<span class="number">0</span>]] ^ val[x]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rev[x])</span><br><span class="line">&#123;</span><br><span class="line">rev[son[x][<span class="number">1</span>]] ^= <span class="number">1</span>, rev[son[x][<span class="number">0</span>]] ^= <span class="number">1</span>, rev[x] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::swap(son[x][<span class="number">1</span>], son[x][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span> </span>&#123; <span class="keyword">return</span> (son[fa[x]][<span class="number">1</span>] != x &amp;&amp; son[fa[x]][<span class="number">0</span>] != x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> fa1 = fa[x], fa2 = fa[fa1], l;</span><br><span class="line"><span class="keyword">if</span> (son[fa1][<span class="number">0</span>] == x) l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> l = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> r = l ^ <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!isroot(fa1))</span><br><span class="line">(son[fa2][<span class="number">0</span>] == fa1) ? (son[fa2][<span class="number">0</span>] = x) : (son[fa2][<span class="number">1</span>] = x);</span><br><span class="line">fa[x] = fa2, fa[fa1] = x, fa[son[x][r]] = fa1,</span><br><span class="line">son[fa1][l] = son[x][r], son[x][r] = fa1,</span><br><span class="line">pushup(fa1), pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top = <span class="number">1</span>, stk[top] = x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = x; !isroot(i); i = fa[i]) stk[++top] = fa[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = top; i; i--) pushdown(stk[i]);</span><br><span class="line"><span class="keyword">while</span> (!isroot(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> y = fa[x], z = fa[y];</span><br><span class="line"><span class="keyword">if</span> (!isroot(y))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((son[y][<span class="number">0</span>] == x) ^ (son[z][<span class="number">0</span>] == y)) rotate(x);</span><br><span class="line"><span class="keyword">else</span> rotate(y);</span><br><span class="line">&#125;</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> t = <span class="number">0</span>; x; t = x, x = fa[x]) splay(x), son[x][<span class="number">1</span>] = t, pushup(x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span> </span>&#123; access(x), splay(x), rev[x] ^= <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; access(x), splay(x); <span class="keyword">while</span> (son[x][<span class="number">0</span>])x = son[x][<span class="number">0</span>]; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span> </span>&#123; makeroot(x), access(y), splay(y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span> </span>&#123; split(x, y); <span class="keyword">if</span> (son[y][<span class="number">0</span>] == x) son[y][<span class="number">0</span>] = <span class="number">0</span>, fa[x] = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span> </span>&#123; makeroot(x), fa[x] = y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = _read(), m = _read();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) val[i] = _read(), LCT::xr[i] = val[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>, opt, x, y; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">opt = _read(), x = _read(), y = _read(); </span><br><span class="line"><span class="keyword">if</span> (!opt)</span><br><span class="line">&#123;</span><br><span class="line">LCT::split(x, y),</span><br><span class="line">write(LCT::xr[y]), push(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">LCT::link(x, y);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">2</span>)</span><br><span class="line">LCT::cut(x, y);</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">3</span>)</span><br><span class="line">LCT::access(x), LCT::splay(x), val[x] = y, LCT::pushup(x);</span><br><span class="line">&#125;</span><br><span class="line">fwrite(pbuf, <span class="number">1</span>, pp - pbuf, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我竭尽全力卡常了…相信我…我已经无能为力了…</p><p>438ms。。。太惨了太惨了</p>]]></content>
      
      <categories>
          
          <category> 复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCT </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
